# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from grpc_testauth import esi_pb2 as grpc__testauth_dot_esi__pb2
from grpc_testauth import group_pb2 as grpc__testauth_dot_group__pb2
from grpc_testauth import ping_pb2 as grpc__testauth_dot_ping__pb2
from grpc_testauth import user_pb2 as grpc__testauth_dot_user__pb2


class GroupServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Search = channel.unary_unary(
                '/grpc_testauth.GroupService/Search',
                request_serializer=grpc__testauth_dot_group__pb2.GroupSearchRequest.SerializeToString,
                response_deserializer=grpc__testauth_dot_group__pb2.GroupSearchResponse.FromString,
                )


class GroupServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GroupServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=grpc__testauth_dot_group__pb2.GroupSearchRequest.FromString,
                    response_serializer=grpc__testauth_dot_group__pb2.GroupSearchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_testauth.GroupService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GroupService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_testauth.GroupService/Search',
            grpc__testauth_dot_group__pb2.GroupSearchRequest.SerializeToString,
            grpc__testauth_dot_group__pb2.GroupSearchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class UserServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Search = channel.unary_unary(
                '/grpc_testauth.UserService/Search',
                request_serializer=grpc__testauth_dot_user__pb2.UserSearchRequest.SerializeToString,
                response_deserializer=grpc__testauth_dot_user__pb2.UserSearchResponse.FromString,
                )
        self.ServiceSearch = channel.unary_unary(
                '/grpc_testauth.UserService/ServiceSearch',
                request_serializer=grpc__testauth_dot_user__pb2.UserServiceSearchRequest.SerializeToString,
                response_deserializer=grpc__testauth_dot_user__pb2.UserSearchResponse.FromString,
                )
        self.GetPapMinutes = channel.unary_unary(
                '/grpc_testauth.UserService/GetPapMinutes',
                request_serializer=grpc__testauth_dot_user__pb2.UserPapMinutesRequest.SerializeToString,
                response_deserializer=grpc__testauth_dot_user__pb2.UserPapMinutesResponse.FromString,
                )


class UserServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServiceSearch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPapMinutes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=grpc__testauth_dot_user__pb2.UserSearchRequest.FromString,
                    response_serializer=grpc__testauth_dot_user__pb2.UserSearchResponse.SerializeToString,
            ),
            'ServiceSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.ServiceSearch,
                    request_deserializer=grpc__testauth_dot_user__pb2.UserServiceSearchRequest.FromString,
                    response_serializer=grpc__testauth_dot_user__pb2.UserSearchResponse.SerializeToString,
            ),
            'GetPapMinutes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPapMinutes,
                    request_deserializer=grpc__testauth_dot_user__pb2.UserPapMinutesRequest.FromString,
                    response_serializer=grpc__testauth_dot_user__pb2.UserPapMinutesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_testauth.UserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_testauth.UserService/Search',
            grpc__testauth_dot_user__pb2.UserSearchRequest.SerializeToString,
            grpc__testauth_dot_user__pb2.UserSearchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServiceSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_testauth.UserService/ServiceSearch',
            grpc__testauth_dot_user__pb2.UserServiceSearchRequest.SerializeToString,
            grpc__testauth_dot_user__pb2.UserSearchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPapMinutes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_testauth.UserService/GetPapMinutes',
            grpc__testauth_dot_user__pb2.UserPapMinutesRequest.SerializeToString,
            grpc__testauth_dot_user__pb2.UserPapMinutesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class EsiServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCharacterToken = channel.unary_unary(
                '/grpc_testauth.EsiService/GetCharacterToken',
                request_serializer=grpc__testauth_dot_esi__pb2.CharacterAccessTokenRequest.SerializeToString,
                response_deserializer=grpc__testauth_dot_esi__pb2.CharacterAccessTokenResponse.FromString,
                )
        self.UpdateCharacter = channel.unary_unary(
                '/grpc_testauth.EsiService/UpdateCharacter',
                request_serializer=grpc__testauth_dot_esi__pb2.CharacterUpdateRequest.SerializeToString,
                response_deserializer=grpc__testauth_dot_esi__pb2.CharacterUpdateResponse.FromString,
                )
        self.UpdateCorporation = channel.unary_unary(
                '/grpc_testauth.EsiService/UpdateCorporation',
                request_serializer=grpc__testauth_dot_esi__pb2.CorporationUpdateRequest.SerializeToString,
                response_deserializer=grpc__testauth_dot_esi__pb2.CorporationUpdateResponse.FromString,
                )
        self.UpdateCharacterSkills = channel.unary_unary(
                '/grpc_testauth.EsiService/UpdateCharacterSkills',
                request_serializer=grpc__testauth_dot_esi__pb2.CharacterSkillsUpdateRequest.SerializeToString,
                response_deserializer=grpc__testauth_dot_esi__pb2.CharacterSkillsUpdateResponse.FromString,
                )


class EsiServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCharacterToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCharacter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCorporation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCharacterSkills(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EsiServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCharacterToken': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCharacterToken,
                    request_deserializer=grpc__testauth_dot_esi__pb2.CharacterAccessTokenRequest.FromString,
                    response_serializer=grpc__testauth_dot_esi__pb2.CharacterAccessTokenResponse.SerializeToString,
            ),
            'UpdateCharacter': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCharacter,
                    request_deserializer=grpc__testauth_dot_esi__pb2.CharacterUpdateRequest.FromString,
                    response_serializer=grpc__testauth_dot_esi__pb2.CharacterUpdateResponse.SerializeToString,
            ),
            'UpdateCorporation': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCorporation,
                    request_deserializer=grpc__testauth_dot_esi__pb2.CorporationUpdateRequest.FromString,
                    response_serializer=grpc__testauth_dot_esi__pb2.CorporationUpdateResponse.SerializeToString,
            ),
            'UpdateCharacterSkills': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCharacterSkills,
                    request_deserializer=grpc__testauth_dot_esi__pb2.CharacterSkillsUpdateRequest.FromString,
                    response_serializer=grpc__testauth_dot_esi__pb2.CharacterSkillsUpdateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_testauth.EsiService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EsiService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCharacterToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_testauth.EsiService/GetCharacterToken',
            grpc__testauth_dot_esi__pb2.CharacterAccessTokenRequest.SerializeToString,
            grpc__testauth_dot_esi__pb2.CharacterAccessTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateCharacter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_testauth.EsiService/UpdateCharacter',
            grpc__testauth_dot_esi__pb2.CharacterUpdateRequest.SerializeToString,
            grpc__testauth_dot_esi__pb2.CharacterUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateCorporation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_testauth.EsiService/UpdateCorporation',
            grpc__testauth_dot_esi__pb2.CorporationUpdateRequest.SerializeToString,
            grpc__testauth_dot_esi__pb2.CorporationUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateCharacterSkills(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_testauth.EsiService/UpdateCharacterSkills',
            grpc__testauth_dot_esi__pb2.CharacterSkillsUpdateRequest.SerializeToString,
            grpc__testauth_dot_esi__pb2.CharacterSkillsUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Search = channel.unary_unary(
                '/grpc_testauth.PingService/Search',
                request_serializer=grpc__testauth_dot_ping__pb2.PingSearchRequest.SerializeToString,
                response_deserializer=grpc__testauth_dot_ping__pb2.PingSearchResponse.FromString,
                )


class PingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=grpc__testauth_dot_ping__pb2.PingSearchRequest.FromString,
                    response_serializer=grpc__testauth_dot_ping__pb2.PingSearchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_testauth.PingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_testauth.PingService/Search',
            grpc__testauth_dot_ping__pb2.PingSearchRequest.SerializeToString,
            grpc__testauth_dot_ping__pb2.PingSearchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
